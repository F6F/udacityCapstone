# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1

orbs:
  kubernetes: circleci/kubernetes@0.12.0

jobs:
  createenv:
    working_directory: ~/udacitiy-capstone
    docker:
    # Use the same Docker base as the project
      - image: python:3.7.3-stretch
        #working_directory: ~/repo
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            #Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
            ls -la 
      - save_cache:
          paths:
            - ./venv
            - /bin/hadolint
          key: v1-dependencies-{{ checksum "requirements.txt" }}

  pylint:
    working_directory: ~/udacitiy-capstone
    docker:
    # Use the same Docker base as the project
      - image: python:3.7.3-stretch
        #working_directory: ~/repo
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make pylint
  dockerlint:
    working_directory: ~/udacitiy-capstone
    docker:
    # Use the same Docker base as the project
      - image: python:3.7.3-stretch
        #working_directory: ~/repo
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make dockerlint 
  builddocker:
    working_directory: ~/udacitiy-capstone
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install dependencies
          command: |
            #apk add --no-cache curl
            apk --upgrade --no-cache add curl
            apk add --no-cache \
              py-pip=9.0.0-r1
            pip install \
              docker-compose==1.12.0 \
              awscli==1.11.76
      - restore_cache:
          keys:
            - v1-{{ .Branch }}
          paths:
            - /caches/app.tar
      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load -i /caches/app.tar | true
      - run:
          name: Build application Docker image
          command: |
            docker build --cache-from=app -t app .
      - run:
          name: Save Docker image layer cache
          command: |
            mkdir -p /caches
            docker save -o /caches/app.tar app
      - save_cache:
          key: v1-{{ .Branch }}-{{ epoch }}
          paths:
            - /caches/app.tar
      - run:
          name: Run tests
          command: |
            docker --version
            #docker-compose -f ./docker-compose.test.yml up -d
            #sleep 4m
            #docker ps
            #export url="http://localhost:8080"
            #export response=$(curl -s $url)
            #echo "This is response $response"
            #if [[ $response == "Hello" ]]; then              
            #  docker stop app_web_1
            #else              
            #  docker stop app_web_1
            #fi
      - run:
          name: Push application Docker image
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              login="$(aws ecr get-login)"
              ${login}
              docker tag app "049928531231.dkr.ecr.eu-central-1.amazonaws.com/uda-repo:${CIRCLE_SHA1}"
              docker push "049928531231.dkr.ecr.eu-central-1.amazonaws.com/uda-repo:${CIRCLE_SHA1}"
            fi

  create-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string

    steps:
      - run:
          name: Install the eksctl tool
          command: |
            if which eksctl > /dev/null; then
              echo "eksctl is already installed"
              exit 0
            fi
            mkdir -p eksctl_download
            curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" \
              | tar xz -C eksctl_download
            chmod +x eksctl_download/eksctl
            SUDO=""
            if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
              SUDO="sudo"
            fi
            $SUDO mv eksctl_download/eksctl /usr/local/bin/
            rmdir eksctl_download
      - aws-eks/install-aws-iam-authenticator:
          release-tag: ''
      - aws-eks/create-cluster:
          cluster-name: << parameters.cluster-name >>
          skip-kubectl-install: false
          show-eksctl-command: true
          verbose: 3
          node-type: t2.micro
          nodes-max: 2
          ssh-access: true
          ssh-public-key: 'TobiKey'
          aws-region: $AWS_REGION
          zones: eu-central-1

  test-eks:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          command: |
            kubectl get services
          name: Test cluster

workflows:
  default:
    jobs:
      - createenv
      - pylint:
          requires: [createenv]
      - dockerlint:
          requires: [createenv]
      - builddocker:
          requires: [createenv]
      - create-cluster:
          cluster-name: udacity-capstone-helloWorld
          requires: [builddocker]
      #- test-eks:
      #    cluster-name: udacity-capstone-helloWorld
      #    requires: [aws-eks/create-cluster]
