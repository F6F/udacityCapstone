# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1
jobs:
  createenv:
    working_directory: ~/udacitiy-capstone
    docker:
    # Use the same Docker base as the project
      - image: python:3.7.3-stretch
        #working_directory: ~/repo
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            #Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
            ls -la 
      - save_cache:
          paths:
            - ./venv
            - /bin/hadolint
          key: v1-dependencies-{{ checksum "requirements.txt" }}

  pylint:
    working_directory: ~/udacitiy-capstone
    docker:
    # Use the same Docker base as the project
      - image: python:3.7.3-stretch
        #working_directory: ~/repo
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make pylint

  dockerlint:
    working_directory: ~/udacitiy-capstone
    docker:
    # Use the same Docker base as the project
      - image: python:3.7.3-stretch
        #working_directory: ~/repo
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make dockerlint 

  builddocker:
    working_directory: ~/udacitiy-capstone
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install dependencies
          command: |
            #apk add --no-cache curl
            apk --upgrade --no-cache add curl
            apk add --no-cache \
              py-pip=9.0.0-r1
            pip install \
              docker-compose==1.12.0 \
              awscli==1.11.76
      - restore_cache:
          keys:
            - v1-{{ .Branch }}
          paths:
            - /caches/app.tar
      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load -i /caches/app.tar | true
      - run:
          name: Build application Docker image
          command: |
            docker build --cache-from=app -t app .
      - run:
          name: Save Docker image layer cache
          command: |
            mkdir -p /caches
            docker save -o /caches/app.tar app
      - save_cache:
          key: v1-{{ .Branch }}-{{ epoch }}
          paths:
            - /caches/app.tar
      - run:
          name: Run tests
          command: |
            docker --version
            #docker-compose -f ./docker-compose.test.yml up -d
            #sleep 4m
            #docker ps
            #export url="http://localhost:8080"
            #export response=$(curl -s $url)
            #echo "This is response $response"
            #if [[ $response == "Hello" ]]; then              
            #  docker stop app_web_1
            #else              
            #  docker stop app_web_1
            #fi
      - run:
          name: Push application Docker image
          command: |
            if [ "${CIRCLE_BRANCH}" == "main" ]; then
              login="$(aws ecr get-login)"
              ${login}
              docker tag app "public.ecr.aws/s1k2x6c2/myapp:${CIRCLE_SHA1}"
              docker push "public.ecr.aws/s1k2x6c2/myapp:${CIRCLE_SHA1}"
            fi

workflows:
  default:
    jobs:
      - createenv
      - pylint:
          requires: [createenv]
      - dockerlint:
          requires: [createenv]
      - builddocker:
          requires: [createenv]
